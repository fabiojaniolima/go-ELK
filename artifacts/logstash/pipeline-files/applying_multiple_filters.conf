# Os arquivos que estou utilizando como input possuem uma proporção de 1 linha de comentário e 1 linha em branco para
# cada linha que casa com o match do filtro grok. Considerando que o grok representa um step computacionalmente mais
# caro, neste contexto estou descartando o evento no top level do filtro. Em testes realizados com a mesma massa o
# tempo de processamento foi de 43ms, sem a verificação (if) no top level este tempo subiu para 320ms.
input {
    file {
        path => "C:/path/to/files*.log"
        # start_position => "beginning"
    }
}

filter {
    if [message] =~ /^#/ or [message] =~ /^\s*$/ {
        drop {}
    }

    grok {
        # Exemplo que casa com o match: 2020-05-11 22:01:20 [ERROR] 90 Mensagem de erro de exemplo
        match => {
            "message" => "%{TIMESTAMP_ISO8601:datetime} \[%{WORD:status}\] %{NUMBER:speed} %{GREEDYDATA:output}"
        }
    }

    if "_grokparsefailure" in [tags] {
      drop {}
    }

    # O target default deste plugin é o @timestamp
    date {
        timezone => "UTC"
        match => ["datetime", "yyyy-MM-dd HH:mm:ss"]
    }

    mutate {
        gsub => ["output", "\r", ""]

        convert => {
            "speed" => "integer"
        }

        remove_field => ["datetime", "message"]
    }
}

output {
    elasticsearch {
        hosts => "127.0.0.1:9200"
        manage_template => false
        index => "example-%{+yyyy.MM.dd}"
    }
}
